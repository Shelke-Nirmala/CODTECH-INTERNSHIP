# -*- coding: utf-8 -*-
"""Task4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BGrfj3WN4v26yDPORgc0ikEzHyS4lGJt
"""

# Import necessary libraries
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, accuracy_score
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Load the dataset from a URL
url = "https://raw.githubusercontent.com/dD2405/Twitter_Sentiment_Analysis/master/train.csv"
data = pd.read_csv(url)

# Step 2: Display the first few rows
print(data.head())

# Step 3: Data preprocessing
# Rename columns for simplicity
data = data.rename(columns={"tweet": "text", "label": "sentiment"})

# Remove missing values
data = data.dropna()

# Clean the text (basic cleaning)
data['cleaned_text'] = data['text'].str.replace(r"[^a-zA-Z\s]", "", regex=True).str.lower()

# Step 4: Text vectorization
vectorizer = CountVectorizer(stop_words='english', max_features=5000)
X = vectorizer.fit_transform(data['cleaned_text'])
y = data['sentiment']

# Step 5: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 6: Train the model
model = MultinomialNB()
model.fit(X_train, y_train)

# Step 7: Evaluate the model
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Accuracy Score:", accuracy_score(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Example of correct and incorrect predictions
test_data = pd.DataFrame({'Text': data['text'][y_test.index], 'Actual': y_test, 'Predicted': y_pred})
print("Correct Predictions:\n", test_data[test_data['Actual'] == test_data['Predicted']].head())
print("Incorrect Predictions:\n", test_data[test_data['Actual'] != test_data['Predicted']].head())