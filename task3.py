# -*- coding: utf-8 -*-
"""Task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xREGaXLor-fKxCKYplgdMu24wlsaKuy9
"""

# Install the required libraries
!pip install dash pandas plotly

# Importing necessary libraries
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px

# Create a sample dataset (replace with your actual data)
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
# Column names for the dataset
columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']

# Load dataset from the URL
data = pd.read_csv(url, header=None, names=columns)

# Initialize the Dash app
app = dash.Dash(__name__)

# App layout
app.layout = html.Div([
    html.H1("Iris Dataset Interactive Dashboard"),

    # Dropdown for selecting feature
    dcc.Dropdown(
        id='feature-dropdown',
        options=[{'label': col, 'value': col} for col in data.columns[:-1]],  # exclude 'species'
        value='sepal_length',  # default value
        style={'width': '50%', 'margin': '0 auto'}
    ),

    # Graph to display the feature vs species
    dcc.Graph(id='feature-graph'),

    # Div to display the table
    html.Div(id='data-table')
])

# Callbacks for interactivity
@app.callback(
    [Output('feature-graph', 'figure'), Output('data-table', 'children')],
    [Input('feature-dropdown', 'value')]
)
def update_graph(selected_feature):
    # Create scatter plot
    fig = px.scatter(
        data,
        x=selected_feature,
        y='sepal_width',  # You can select another feature for the y-axis
        color='species',
        title=f"{selected_feature} vs Sepal Width",
        labels={'sepal_width': 'Sepal Width (cm)', selected_feature: selected_feature}
    )

    # Create a table to display the first 10 rows
    table = html.Table(
        [
            html.Thead(html.Tr([html.Th(col) for col in data.columns])),
            html.Tbody([
                html.Tr([html.Td(data.iloc[i][col]) for col in data.columns]) for i in range(min(len(data), 10))  # Limit to 10 rows for display
            ])
        ],
        style={'width': '100%', 'margin': '20px auto', 'border': '1px solid black', 'borderCollapse': 'collapse'}
    )

    return fig, table

# Run the Dash app
if __name__ == '__main__':
    app.run_server(debug=True)